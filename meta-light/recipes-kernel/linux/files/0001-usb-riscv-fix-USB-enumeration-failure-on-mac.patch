From b4a180b104f5daaeca245883f1ebbd36a197cc4a Mon Sep 17 00:00:00 2001
Date: Fri, 1 Apr 2022 11:30:17 +0800
Subject: [PATCH] usb: riscv: fix USB enumeration failure on mac

---
 drivers/usb/gadget/function/f_fs.c | 36 ++++++++++++++++--------------
 1 file changed, 19 insertions(+), 17 deletions(-)

diff --git a/drivers/usb/gadget/function/f_fs.c b/drivers/usb/gadget/function/f_fs.c
index bb0d92837f67..225ebcb93b6b 100644
--- a/drivers/usb/gadget/function/f_fs.c
+++ b/drivers/usb/gadget/function/f_fs.c
@@ -1067,23 +1067,25 @@ static ssize_t ffs_epfile_io(struct file *file, struct ffs_io_data *io_data)
 		req->context  = &done;
 		req->complete = ffs_epfile_io_complete;
 
-		ret = usb_ep_queue(ep->ep, req, GFP_ATOMIC);
-		if (unlikely(ret < 0))
-			goto error_lock;
-
-		spin_unlock_irq(&epfile->ffs->eps_lock);
-
-		if (unlikely(wait_for_completion_interruptible(&done))) {
-			/*
-			 * To avoid race condition with ffs_epfile_io_complete,
-			 * dequeue the request first then check
-			 * status. usb_ep_dequeue API should guarantee no race
-			 * condition with req->complete callback.
-			 */
-			usb_ep_dequeue(ep->ep, req);
-			wait_for_completion(&done);
-			interrupted = ep->status < 0;
-		}
+        do {
+		    ret = usb_ep_queue(ep->ep, req, GFP_ATOMIC);
+		    if (unlikely(ret < 0))
+		    	goto error_lock;
+
+		    spin_unlock_irq(&epfile->ffs->eps_lock);
+
+		    if (unlikely(wait_for_completion_interruptible(&done))) {
+		    	/*
+		    	 * To avoid race condition with ffs_epfile_io_complete,
+		    	 * dequeue the request first then check
+		    	 * status. usb_ep_dequeue API should guarantee no race
+		    	 * condition with req->complete callback.
+		    	 */
+		    	usb_ep_dequeue(ep->ep, req);
+		    	wait_for_completion(&done);
+		    	interrupted = ep->status < 0;
+		    }
+        } while (ep->status < 0);
 
 		if (interrupted)
 			ret = -EINTR;
-- 
2.17.1

